---
styles:
  styles.css
format:
  html:
    title: 'Analysis'
    toc: true
    toc-depth: 6
    toc-title: Contents
    toc-location: left
    toc-expand: 5
    smooth-scroll: true
    anchor-sections: true
    include-after-body: abbrv_toc.html
    number-sections: true
---

![](giphy.gif){fig-align="center" width="360"}

Libraries and connection parameters are provided here.

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

library(RMySQL)
library(readr)
library(dplyr)
library(knitr)
library(ggplot2)
library(plotly)
library(leaflet)
library(tidyr)
library(httr)
library(jsonlite)
library(lubridate)

# Set up the connection parameters
db_host <- "127.0.0.1"  # Localhost address
db_user <- "root"  # MySQL username
db_password <- ""  # MySQL password
db_name <- "emu415_ciphers"  # The name of database

# Establish the connection
db_connection <- dbConnect(RMySQL::MySQL(), 
                           host = db_host,
                           user = db_user,
                           password = db_password,
                           dbname = db_name)
```

# Overall Rating per Company

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


# Write your SQL query to calculate overall rating per company
query <- "
SELECT 
    c.company_name,
    ROUND(AVG(r.transportation_rating), 2) AS avg_transportation_rating,
    ROUND(AVG(r.work_env_rating), 2) AS avg_work_env_rating,
    ROUND(AVG(r.learning_opp_rating), 2) AS avg_learning_opp_rating,
    ROUND(AVG(r.food_rating), 2) AS avg_food_rating,
    ROUND(AVG(r.hr_rating), 2) AS avg_hr_rating,
    ROUND(AVG(r.mentor_rating), 2) AS avg_mentor_rating,
    ROUND((AVG(r.transportation_rating) + AVG(r.work_env_rating) + AVG(r.learning_opp_rating) + AVG(r.food_rating) + AVG(r.hr_rating) + AVG(r.mentor_rating)) / 6, 2) AS overall_rating
FROM internships AS i
JOIN companies AS c ON i.company_id = c.company_id
JOIN ratings AS r ON i.internship_id = r.internship_id
GROUP BY c.company_name
ORDER BY overall_rating DESC
"

# Execute the query and fetch the results
results <- dbGetQuery(db_connection, query)

# Reverse the order of the results dataframe
results <- results[order(-results$overall_rating), ]

kable(head(results, 10))

# Plot the results using plotly
plot_ly(results, x = ~company_name, y = ~overall_rating, type = 'bar', name = 'Overall Rating') %>%
  layout(title = "Overall Rating per Company",
         xaxis = list(title = "", tickangle = 45, tickfont = list(size = 10), categoryorder = "array", categoryarray = ~company_name),
         yaxis = list(title = "Overall Rating", range = c(1, 5)))
```

# Number of Interns in Each Company

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Write your SQL query to count the number of interns per company
query <- "
SELECT 
    companies.company_name,
    COUNT(*) AS num_interns,
    ROUND(AVG(r.transportation_rating), 2) AS avg_transportation_rating,
    ROUND(AVG(r.work_env_rating), 2) AS avg_work_env_rating,
    ROUND(AVG(r.learning_opp_rating), 2) AS avg_learning_opp_rating,
    ROUND(AVG(r.food_rating), 2) AS avg_food_rating,
    ROUND(AVG(r.hr_rating), 2) AS avg_hr_rating,
    ROUND(AVG(r.mentor_rating), 2) AS avg_mentor_rating,
    ROUND((AVG(r.transportation_rating) + AVG(r.work_env_rating) + AVG(r.learning_opp_rating) + AVG(r.food_rating) + AVG(r.hr_rating) + AVG(r.mentor_rating)) / 6, 2) AS overall_rating
FROM internships
JOIN companies ON internships.company_id = companies.company_id
LEFT JOIN ratings r ON internships.internship_id = r.internship_id
GROUP BY companies.company_name
HAVING COUNT(*) > 1
"

# Execute the query and fetch the results
company_results <- dbGetQuery(db_connection, query)

kable(head(company_results, 10))

# Plot the results using plotly
plot_ly(company_results, x = ~company_name, y = ~num_interns, type = 'bar', name = 'Number of Interns') %>%
  add_trace(x = ~company_name, y = ~overall_rating, type = 'scatter', mode = 'lines+markers', name = 'Overall Rating', yaxis = "y2", line = list(shape = 'li', connectgaps = TRUE)) %>%
  layout(title = "Number of Interns and Overall Rating per Company (with more than 1 intern)",
         xaxis = list(title = "Company Name"),
         yaxis = list(title = "Number of Interns"),
         yaxis2 = list(title = "Overall Rating", overlaying = "y", side = "right", range = c(0, max(company_results$overall_rating) + 1)))
```

# Number of Interns per Industry

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Write your SQL query to calculate the overall rating per industry
query <- "
SELECT 
    c.industry,
    COUNT(*) AS num_interns,
    ROUND(AVG(r.transportation_rating), 2) AS avg_transportation_rating,
    ROUND(AVG(r.work_env_rating), 2) AS avg_work_env_rating,
    ROUND(AVG(r.learning_opp_rating), 2) AS avg_learning_opp_rating,
    ROUND(AVG(r.food_rating), 2) AS avg_food_rating,
    ROUND(AVG(r.hr_rating), 2) AS avg_hr_rating,
    ROUND(AVG(r.mentor_rating), 2) AS avg_mentor_rating,
    ROUND((AVG(r.transportation_rating) + AVG(r.work_env_rating) + AVG(r.learning_opp_rating) + AVG(r.food_rating) + AVG(r.hr_rating) + AVG(r.mentor_rating)) / 6, 2) AS overall_rating
FROM internships i
JOIN companies c ON i.company_id = c.company_id
LEFT JOIN ratings r ON i.internship_id = r.internship_id
GROUP BY c.industry
HAVING num_interns > 1
ORDER BY num_interns DESC;
"

# Execute the query and fetch the results
results <- dbGetQuery(db_connection, query)

# Reorder the results dataframe by num_interns in descending order
results <- results[order(-results$num_interns), ]

kable(head(results, 10))

# Plot the results using plotly
plot_ly(results, x = ~reorder(industry, -num_interns), y = ~num_interns, type = 'bar', name = 'Number of Interns') %>%
  add_trace(x = ~reorder(industry, -num_interns), y = ~overall_rating, type = 'scatter', mode = 'lines+markers', name = 'Overall Rating', yaxis = "y2", connectgaps = TRUE) %>%
  layout(title = "Number of Interns and Overall Rating per Industry (with more than 1 intern)",
         xaxis = list(title = "Industry", categoryorder = "total descending"),
         yaxis = list(title = "Number of Interns"),
         yaxis2 = list(title = "Overall Rating", overlaying = "y", side = "right", range = c(0, max(results$overall_rating) + 1)))

```

# Number of Interns per Department

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


# Write your SQL query to count the number of interns per department and calculate the average learning opportunity rating
query <- "
SELECT 
    i.department,
    COUNT(*) AS num_interns,
    ROUND(AVG(r.learning_opp_rating), 2) AS avg_learning_opp_rating
FROM internships i
LEFT JOIN ratings r ON i.internship_id = r.internship_id
GROUP BY i.department;
"

# Execute the query and fetch the results
department_results <- dbGetQuery(db_connection, query)

kable(head(department_results, 10))

# Plot the results using plotly
plot_ly(department_results, x = ~department, y = ~num_interns, type = 'bar', name = 'Number of Interns') %>%
  add_trace(x = ~department, y = ~avg_learning_opp_rating, type = 'scatter', mode = 'lines+markers', name = 'Avg Learning Opp Rating', yaxis = "y2", connectgaps = TRUE) %>%
  layout(title = "Number of Interns and Average Learning Opp Rating per Department",
         xaxis = list(title = "Department"),
         yaxis = list(title = "Number of Interns"),
         yaxis2 = list(title = "Avg Learning Opp Rating", overlaying = "y", side = "right", range = c(0, max(department_results$avg_learning_opp_rating) + 1)))

```

# Comments

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"


# SQL query
query <- "
SELECT 
    s.first_name,
    s.last_name,
    c.company_name,
    ROUND((r.transportation_rating + r.work_env_rating + r.learning_opp_rating + r.food_rating + r.hr_rating + r.mentor_rating) / 6, 2) AS overall_rating,
    r.comment
FROM 
    ratings r
JOIN 
    internships i ON r.internship_id = i.internship_id
JOIN 
    students s ON i.student_id = s.student_id
JOIN 
    companies c ON i.company_id = c.company_id
WHERE 
    r.comment IS NOT NULL
ORDER BY
    s.first_name;
"

# Execute the query and fetch the results
results <- dbGetQuery(db_connection, query)

# Display the results
kable(results)
```

# Geographical Distribution of Companies

```{r message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Function to geocode using OpenStreetMap Nominatim API
geocode_nominatim <- function(location) {
  url <- paste0("https://nominatim.openstreetmap.org/search?q=", URLencode(location), "&format=json&addressdetails=1")
  response <- GET(url)
  if (http_error(response)) {
    stop("Error occurred while geocoding")
  }
  result <- content(response)
  if (length(result) == 0) {
    stop("No results found for the location")
  }
  # Extract latitude and longitude from the first result
  latitude <- as.numeric(result[[1]]$lat)
  longitude <- as.numeric(result[[1]]$lon)
  return(data.frame(latitude = latitude,
                    longitude = longitude,
                    location = location))
}

# Query to fetch company name, location, and overall rating
query <- "
SELECT c.company_name, c.location, 
ROUND((AVG(r.transportation_rating) + AVG(r.work_env_rating) + AVG(r.learning_opp_rating) + AVG(r.food_rating) + AVG(r.hr_rating) + AVG(r.mentor_rating)) / 6, 2) AS overall_rating
FROM internships i
JOIN companies c ON i.company_id = c.company_id
LEFT JOIN ratings r ON i.internship_id = r.internship_id
GROUP BY c.company_name, c.location
"

# Retrieve company name, location, and overall rating data
company_data <- dbGetQuery(db_connection, query)

# Geocode the locations using OpenStreetMap Nominatim
geocoded_locations <- lapply(company_data$location, geocode_nominatim)
geocoded_locations <- do.call(rbind, geocoded_locations)

# Create a Leaflet map
map <- leaflet() %>%
  addTiles() %>%
  setView(lng = 35.1686, lat = 39.9334, zoom = 6) %>%  # Center the map on Turkey
  addCircleMarkers(data = geocoded_locations, lng = ~longitude, lat = ~latitude,
                   radius = 6, color = "blue", fillOpacity = 0.8,
                   popup = paste("<b>Company:</b> ", company_data$company_name, "<br>",
                                 "<b>Overall Rating:</b> ", company_data$overall_rating),
                   stroke = FALSE, group = "markers") %>%
  addLayersControl(overlayGroups = "markers", options = layersControlOptions(collapsed = FALSE))

# Display the map
map
```
